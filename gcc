
	1、安装gmp

	   下载gmp

	    ftp://ftp.gnu.org/gnu/gmp/gmp-4.3.2.tar.gz

	

		    ftp://gcc.gnu.org/pub/gcc/infrastructure/gmp-6.1.0.tar.bz2

	


	    ./configure --prefix=/usr/local/gmp-4.3.2

	    make & make install

	2、安装mpfr

	    下载安装mpfr

	    http://www.mpfr.org/mpfr-2.4.2/mpfr-2.4.2.tar.gz

	

		    http://www.mpfr.org/mpfr-current/mpfr-3.1.5.tar.gz
	


	    ./configure --prefix=/usr/local/mpfr-2.4.2 --with-gmp=/usr/local/gmp-4.3.2

	    make & make install

	3、安装mpc-0.8.1

	

		    http://www.multiprecision.org/downloads/mpc-0.8.1.tar.gz

		

			    ftp://gcc.gnu.org/pub/gcc/infrastructure/mpc-1.0.3.tar.gz

		

	


	    ./configure --prefix=/usr/local/mpc-0.8.1 --with-gmp=/usr/local/gmp-4.3.2 --with-mpfr=/usr/local/mpfr-2.4.2

	    make & make install

	    


	4、设置环境变量

	    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/gmp-4.3.2/lib:/usr/local/mpfr-2.4.2/lib:/usr/local/mpc-0.8.1/lib

	    否则会报如下错误

	    configure: error: cannot compute suffix of object files: cannot compile

	


	5、安装gcc-4.8.3

	    https://ftp.gnu.org/gnu/gcc/gcc-4.8.3/gcc-4.8.3.tar.gz

	    ./configure --prefix=/usr/local/gcc-4.8.3 -enable-threads=posix -disable-checking -disable-multilib -enable-languages=c,c++ --with-gmp=/usr/local/gmp-4.3.2 --with-mpfr=/usr/local/mpfr-2.4.2 --with-mpc=/usr/local/mpc-0.8.1

	    make & make install

	    


	6、建立软连接

	    cd /usr/bin/ （可以备份l）
  ln -s /usr/local/gcc-4.8.3/bin/gcc gcc    　(修改gcc符号链接)
  ln -s /usr/local/gcc-4.8.3/bin/g++ g++   (修改g++符号链接)

	    


	    cd /usr/lib64

	    ln -s /usr/local/gcc-4.8.3/lib64/libstdc++.so.6 libstdc++.so.6    　(修改libstdc++.so.6符号链接)

	


	    查看

	    strings /usr/lib64/libstdc++.so.6 | grep GLIBCXX

	    


	


	CMake c++11支持

	include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
elseif(COMPILER_SUPPORTS_CXX0X)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
else()
    message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
endif()

	


	core文件生成

	


	root 权限 

	1、设置core文件大小

	ulimit -c unlimited		core文件的大小不受限制 

	2、设置core文件的名称和文件路径

	默认生成路径：输入可执行文件运行命令的同一路径下

	默认生成名字：默认命名为core。新的core文件会覆盖旧的core文件

	a.设置pid作为文件扩展名

	1：添加pid作为扩展名，生成的core文件名称为core.pid

	0：不添加pid作为扩展名，生成的core文件名称为core

	修改 /proc/sys/kernel/core_uses_pid 文件内容为: 1

	修改文件命令： echo "1" > /proc/sys/kernel/core_uses_pid

	或者 sysctl -w kernel.core_uses_pid=1 kernel.core_uses_pid = 1

	b. 控制core文件保存位置和文件名格式

	修改文件命令： echo "/corefile/core-%e-%p-%t" > /proc/sys/kernel/core_pattern

	或者：sysctl -w kernel.core_pattern=/corefile/core-%e-%p-%t kernel.core_pattern = /corefile/core-%e-%p-%t

	可以将core文件统一生成到/corefile目录下，产生的文件名为core-命令名-pid-时间戳
